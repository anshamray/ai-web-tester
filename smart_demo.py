#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤
"""

import asyncio
import sys
from smart_exploration_agent import SmartExplorationAgent
from datetime import datetime

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    print("=" * 80)
    print("ü§ñ –£–ú–ù–´–ô –ê–ì–ï–ù–¢ –î–õ–Ø –ì–õ–£–ë–û–ö–û–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –í–ï–ë-–°–ê–ô–¢–û–í")
    print("=" * 80)
    print("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–º–∏")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º")
    print("   ‚Ä¢ –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤")
    print("=" * 80)
    print()

def get_demo_sites():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""
    return {
        "1": {
            "name": "HTTPBin Forms",
            "url": "https://httpbin.org/forms/post",
            "description": "–°–∞–π—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "features": ["–§–æ—Ä–º—ã", "POST –∑–∞–ø—Ä–æ—Å—ã", "–í–∞–ª–∏–¥–∞—Ü–∏—è"]
        },
        "2": {
            "name": "Books to Scrape",
            "url": "http://books.toscrape.com",
            "description": "E-commerce —Å–∞–π—Ç —Å –∫–Ω–∏–≥–∞–º–∏",
            "features": ["–ö–∞—Ç–∞–ª–æ–≥", "–ü–æ–∏—Å–∫", "–ù–∞–≤–∏–≥–∞—Ü–∏—è"]
        },
        "3": {
            "name": "Example.com",
            "url": "https://example.com",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π—Ç",
            "features": ["–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ü—Ä–æ—Å—Ç–æ—Ç–∞"]
        },
        "4": {
            "name": "JSONPlaceholder",
            "url": "https://jsonplaceholder.typicode.com",
            "description": "API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "features": ["REST API", "JSON", "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
        }
    }

def display_demo_sites():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã"""
    sites = get_demo_sites()
    
    print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:")
    print("-" * 50)
    
    for key, site in sites.items():
        print(f"{key}. {site['name']}")
        print(f"   URL: {site['url']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {site['description']}")
        print(f"   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(site['features'])}")
        print()
    
    print("5. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π URL")
    print()

def get_user_choice():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (1-5): ").strip()
            if choice in ['1', '2', '3', '4', '5']:
                return choice
            else:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

def get_custom_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π URL"""
    while True:
        try:
            url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ").strip()
            if url:
                if not url.startswith(('http://', 'https://')):
                    url = 'https://' + url
                return url
            else:
                print("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

def get_exploration_depth():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    while True:
        try:
            depth = input("–ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (1-5, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip()
            if not depth:
                return 3
            depth = int(depth)
            if 1 <= depth <= 5:
                return depth
            else:
                print("‚ùå –ì–ª—É–±–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

async def run_smart_exploration(url: str, depth: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞"""
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é —É–º–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: {url}")
    print(f"üìä –ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {depth}")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M:%S')}")
    print("-" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = SmartExplorationAgent()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        report = await agent.deep_explore_website(url, max_depth=depth)
        
        print("-" * 80)
        print("‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("-" * 80)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_exploration_summary(report)
        
        return report
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {e}")
        return None

def print_exploration_summary(report: dict):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"""
    
    print("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
    print(f"   üåê URL: {report.get('url', 'N/A')}")
    print(f"   üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ä–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {report.get('auth_forms_discovered', 0)}")
    print(f"   üë• –ü–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(report.get('registration_attempts', []))}")
    print(f"   üìù –§–æ—Ä–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(report.get('form_interactions', []))}")
    print(f"   üïµÔ∏è –°–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(report.get('hidden_functionality', []))}")
    print(f"   üõ§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(report.get('user_flows', []))}")
    print(f"   üîí –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(report.get('security_findings', []))}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_attempts = report.get('registration_attempts', [])
    if reg_attempts:
        print("\nüë• –ü–û–ü–´–¢–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:")
        for attempt in reg_attempts:
            persona = attempt.get('persona', 'Unknown')
            success = attempt.get('submit_result', {}).get('success', False)
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –ù–µ—É–¥–∞—á–Ω–æ"
            print(f"   ‚Ä¢ {persona}: {status}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–æ—Ä–º–∞–º
    form_interactions = report.get('form_interactions', [])
    if form_interactions:
        print("\nüìù –ê–ù–ê–õ–ò–ó –§–û–†–ú:")
        for form in form_interactions:
            purpose = form.get('purpose', 'unknown')
            filled = len(form.get('fill_result', {}).get('filled_fields', []))
            print(f"   ‚Ä¢ –§–æ—Ä–º–∞ {form.get('form_index', '?')} ({purpose}): –∑–∞–ø–æ–ª–Ω–µ–Ω–æ {filled} –ø–æ–ª–µ–π")
    
    # –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_findings = report.get('security_findings', [])
    if security_findings:
        print("\nüîí –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        for finding in security_findings:
            finding_type = finding.get('type', 'unknown')
            severity = finding.get('severity', 'unknown')
            print(f"   ‚Ä¢ {finding_type} (—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity})")
    
    # –°–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    hidden_functionality = report.get('hidden_functionality', [])
    if hidden_functionality:
        print("\nüïµÔ∏è –°–ö–†–´–¢–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        for feature in hidden_functionality:
            feature_type = feature.get('type', 'unknown')
            if feature_type == 'hidden_elements':
                count = feature.get('count', 0)
                print(f"   ‚Ä¢ –°–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {count}")
            elif feature_type == 'html_comments':
                count = len(feature.get('comments', []))
                print(f"   ‚Ä¢ HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {count}")
            elif feature_type == 'data_attributes':
                count = len(feature.get('attributes', []))
                print(f"   ‚Ä¢ Data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤: {count}")

def show_detailed_results_menu(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    while True:
        print("\n" + "=" * 50)
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 50)
        print("1. –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("2. –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        print("3. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞–º–∏")
        print("4. –°–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        print("5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏")
        print("6. –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("7. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("8. –ü–æ–ª–Ω—ã–π JSON –æ—Ç—á–µ—Ç")
        print("9. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print()
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª (1-9): ").strip()
            
            if choice == '1':
                show_main_page_analysis(report)
            elif choice == '2':
                show_registration_attempts(report)
            elif choice == '3':
                show_form_interactions(report)
            elif choice == '4':
                show_hidden_functionality(report)
            elif choice == '5':
                show_user_flows(report)
            elif choice == '6':
                show_security_analysis(report)
            elif choice == '7':
                show_performance_analysis(report)
            elif choice == '8':
                show_full_json_report(report)
            elif choice == '9':
                break
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

def show_main_page_analysis(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    analysis = report.get('main_page_analysis', {})
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´:")
    print("-" * 40)
    
    if isinstance(analysis, dict):
        for key, value in analysis.items():
            print(f"{key}: {value}")
    else:
        print(analysis)
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_registration_attempts(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    attempts = report.get('registration_attempts', [])
    
    print("\nüë• –ü–û–ü–´–¢–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:")
    print("-" * 40)
    
    if not attempts:
        print("–ü–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ")
    else:
        for i, attempt in enumerate(attempts, 1):
            print(f"\n{i}. –ü–µ—Ä—Å–æ–Ω–∞: {attempt.get('persona', 'Unknown')}")
            print(f"   URL —Ñ–æ—Ä–º—ã: {attempt.get('form_url', 'N/A')}")
            
            fill_result = attempt.get('fill_result', {})
            filled_fields = fill_result.get('filled_fields', [])
            print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {len(filled_fields)}")
            
            for field in filled_fields:
                print(f"     ‚Ä¢ {field.get('field', 'unknown')}: {field.get('value', 'N/A')}")
            
            submit_result = attempt.get('submit_result', {})
            success = submit_result.get('success', False)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_form_interactions(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞–º–∏"""
    interactions = report.get('form_interactions', [])
    
    print("\nüìù –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –§–û–†–ú–ê–ú–ò:")
    print("-" * 40)
    
    if not interactions:
        print("–§–æ—Ä–º –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        for interaction in interactions:
            form_index = interaction.get('form_index', '?')
            purpose = interaction.get('purpose', 'unknown')
            inputs_count = interaction.get('inputs_count', 0)
            
            print(f"\n–§–æ—Ä–º–∞ {form_index} ({purpose}):")
            print(f"   –ü–æ–ª–µ–π –≤–≤–æ–¥–∞: {inputs_count}")
            
            fill_result = interaction.get('fill_result', {})
            filled_fields = fill_result.get('filled_fields', [])
            errors = fill_result.get('errors', [])
            
            print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {len(filled_fields)}")
            if errors:
                print(f"   –û—à–∏–±–æ–∫: {len(errors)}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_hidden_functionality(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    hidden = report.get('hidden_functionality', [])
    
    print("\nüïµÔ∏è –°–ö–†–´–¢–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
    print("-" * 40)
    
    if not hidden:
        print("–°–∫—Ä—ã—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        for feature in hidden:
            feature_type = feature.get('type', 'unknown')
            print(f"\n‚Ä¢ {feature_type.upper()}:")
            
            if feature_type == 'hidden_elements':
                elements = feature.get('elements', [])
                print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
                for elem in elements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"    - {elem.get('tag', 'unknown')} (class: {elem.get('class', 'none')})")
            
            elif feature_type == 'html_comments':
                comments = feature.get('comments', [])
                print(f"  –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
                for comment in comments[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"    - {comment[:50]}...")
            
            elif feature_type == 'data_attributes':
                attributes = feature.get('attributes', [])
                print(f"  –ù–∞–π–¥–µ–Ω–æ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤: {len(attributes)}")
                for attr in attributes[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"    - {attr.get('attribute', 'unknown')}: {attr.get('value', 'N/A')}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_user_flows(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏"""
    flows = report.get('user_flows', [])
    
    print("\nüõ§Ô∏è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–û–¢–û–ö–ò:")
    print("-" * 40)
    
    if not flows:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        for i, flow in enumerate(flows, 1):
            print(f"\n{i}. {flow.get('page_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   URL: {flow.get('start_url', 'N/A')}")
            
            interactive = flow.get('interactive_elements', {})
            buttons = interactive.get('buttons', [])
            links = interactive.get('links', [])
            
            print(f"   –ö–Ω–æ–ø–æ–∫: {len(buttons)}")
            print(f"   –°—Å—ã–ª–æ–∫: {len(links)}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_security_analysis(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    security = report.get('security_findings', [])
    
    print("\nüîí –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("-" * 40)
    
    if not security:
        print("–ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        for finding in security:
            finding_type = finding.get('type', 'unknown')
            severity = finding.get('severity', 'unknown')
            
            print(f"\n‚Ä¢ {finding_type.upper()} (—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity})")
            
            if finding_type == 'missing_security_headers':
                headers = finding.get('headers', [])
                print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
            
            elif finding_type == 'forms_without_csrf':
                count = finding.get('count', 0)
                print(f"  –§–æ—Ä–º –±–µ–∑ CSRF –∑–∞—â–∏—Ç—ã: {count}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_performance_analysis(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    performance = report.get('performance_insights', {})
    
    print("\n‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("-" * 40)
    
    metrics = performance.get('metrics', {})
    if metrics:
        load_time = metrics.get('page_load_time', 0)
        dom_loaded = metrics.get('dom_content_loaded', 0)
        resources = metrics.get('resources_count', 0)
        
        print(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {load_time:.2f} –º—Å")
        print(f"DOM –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞: {dom_loaded:.2f} –º—Å")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {resources}")
        
        recommendations = performance.get('recommendations', [])
        if recommendations:
            print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations:
                print(f"  ‚Ä¢ {rec}")
    else:
        print("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_full_json_report(report: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON –æ—Ç—á–µ—Ç"""
    import json
    
    print("\nüìÑ –ü–û–õ–ù–´–ô JSON –û–¢–ß–ï–¢:")
    print("-" * 40)
    print(json.dumps(report, ensure_ascii=False, indent=2))
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print_banner()
    
    while True:
        try:
            display_demo_sites()
            choice = get_user_choice()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            if choice == '5':
                url = get_custom_url()
            else:
                sites = get_demo_sites()
                url = sites[choice]['url']
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª—É–±–∏–Ω—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            depth = get_exploration_depth()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            report = await run_smart_exploration(url, depth)
            
            if report:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                show_detailed_results_menu(report)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            print("\n" + "=" * 50)
            continue_choice = input("–•–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∞–π—Ç? (y/n): ").strip().lower()
            if continue_choice not in ['y', 'yes', '–¥', '–¥–∞']:
                break
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            continue

if __name__ == "__main__":
    asyncio.run(main()) 